import React from 'react';
import { MDCSelectAdapter } from '@material/select/adapter';
import { MDCSelectFoundation } from '@material/select/foundation';
import MDCSelectHelperTextFoundation from '@material/select/helper-text/foundation';
import MDCSelectIconFoundation from '@material/select/icon/foundation';
import { EnhancedChild } from './EnhancedSelect';
import Option, { OptionProps } from './Option';
import { SelectHelperTextProps } from './helper-text/index';
import { SelectIconProps } from './icon/index';
declare type SelectOptionsType = (string | React.HTMLProps<HTMLOptionElement>)[];
declare type NativeChild = React.ReactElement<OptionProps<HTMLElement>>;
declare type SelectChildren<T extends HTMLElement> = EnhancedChild<T> | EnhancedChild<T>[] | NativeChild | NativeChild[];
export interface SelectProps<T extends HTMLElement = HTMLElement> extends React.HTMLProps<HTMLSelectElement> {
    enhanced?: boolean;
    children?: SelectChildren<T>;
    className?: string;
    disabled?: boolean;
    floatingLabelClassName?: string;
    label?: string;
    lineRippleClassName?: string;
    selectClassName?: string;
    notchedOutlineClassName?: string;
    outlined?: boolean;
    options?: SelectOptionsType;
    value: string;
    afterChange?: (value: string) => void;
    onEnhancedChange?: (index: number, target: Element) => void;
    helperText?: React.ReactElement<SelectHelperTextProps>;
    leadingIcon?: React.ReactElement<SelectIconProps>;
}
interface SelectState {
    open?: boolean;
    value: string;
    classList: Set<string>;
    disabled: boolean;
    labelIsFloated: boolean;
    labelWidth: number;
    activeLineRipple: boolean;
    lineRippleCenter?: number;
    outlineIsNotched: boolean;
    selectElement: React.RefObject<HTMLDivElement>;
    isInvalid: boolean;
    helperTextFoundation?: MDCSelectHelperTextFoundation;
    iconFoundation?: MDCSelectIconFoundation;
    foundation?: MDCSelectFoundation;
}
export default class Select<T extends HTMLElement = HTMLSelectElement> extends React.Component<SelectProps<T>, SelectState> {
    nativeControl: React.RefObject<HTMLSelectElement>;
    classesBeingRemoved: Set<unknown>;
    classesBeingAdded: Set<unknown>;
    constructor(props: SelectProps<T>);
    static defaultProps: Partial<SelectProps<HTMLElement>>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: SelectProps<T>, prevState: SelectState): void;
    componentWillUnmount(): void;
    /**
     * getters
     */
    readonly classes: string;
    readonly adapter: MDCSelectAdapter;
    readonly foundationMap: {
        helperText: MDCSelectHelperTextFoundation | undefined;
        leadingIcon: MDCSelectIconFoundation | undefined;
    };
    createFoundation: (callback?: (() => void) | undefined) => void;
    destroyFoundation: () => void;
    addClass: (className: string) => void;
    removeClass: (className: string) => void;
    closeMenu: () => void;
    setValidClasses: (isValid: boolean) => void;
    setHelperTextFoundation: (helperTextFoundation: MDCSelectHelperTextFoundation) => void;
    setIconFoundation: (iconFoundation: MDCSelectIconFoundation) => void;
    /**
     * render methods
     */
    render(): JSX.Element;
    renderSelect(): JSX.Element;
    renderOptions(): JSX.Element[] | React.ReactElement<OptionProps<HTMLElement>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
    renderLabel(): JSX.Element | undefined;
    renderLineRipple(): JSX.Element;
    renderNotchedOutline(): JSX.Element;
    renderHelperText(): React.ReactElement<SelectHelperTextProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
    renderIcon(): React.ReactElement<SelectIconProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
}
export { SelectHelperText, SelectHelperTextProps } from './helper-text';
export { SelectIcon, SelectIconProps } from './icon';
export { Option };
export { MenuListDivider as OptionDivider, MenuListGroup as OptionGroup, MenuListGroupSubheader as OptionGroupSubheader, MenuListItemGraphic as OptionGraphic, MenuListItemMeta as OptionMeta, MenuListItemText as OptionText, } from '@material/react-menu';
